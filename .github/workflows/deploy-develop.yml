name: CI/CD

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install jq and Read Config
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        echo "SERVICE_NAME=$(jq -r .service.name configs/develop.json)" >> $GITHUB_ENV
        echo "REPLICAS=$(jq -r .service.replicas configs/develop.json)" >> $GITHUB_ENV
        echo "RESTART_CONDITION=$(jq -r .service.restart_condition configs/develop.json)" >> $GITHUB_ENV
        echo "RESTART_DELAY=$(jq -r .service.restart_delay configs/develop.json)" >> $GITHUB_ENV
        echo "RESTART_MAX_ATTEMPTS=$(jq -r .service.restart_max_attempts configs/develop.json)" >> $GITHUB_ENV
        echo "IMAGE=$(jq -r .service.image configs/develop.json)" >> $GITHUB_ENV
        echo "PORT=$(jq -r .service.port configs/develop.json)" >> $GITHUB_ENV

        # Criar tag personalizada baseada na hash do commit e data
        IMAGE_TAG=$(echo "${{ github.sha }}" | head -c7)
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
        push: true
        file: ./Dockerfile
        context: .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Cria o serviço se ele não existir
          docker service create --name ${{ env.SERVICE_NAME }} \
                                --replicas ${{ env.REPLICAS }} \
                                --restart-condition ${{ env.RESTART_CONDITION }} \
                                --restart-delay ${{ env.RESTART_DELAY }} \
                                --restart-max-attempts ${{ env.RESTART_MAX_ATTEMPTS }} \
                                --publish ${{ env.PORT }} \
                                ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest || \
          # Atualiza o serviço se ele já existir
          docker service update --image ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest \
                                --replicas ${{ env.REPLICAS }} \
                                --publish-add ${{ env.PORT }} \
                                ${{ env.SERVICE_NAME }}
