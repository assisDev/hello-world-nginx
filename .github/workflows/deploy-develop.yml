name: CI/CD

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install jq and Read Config
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        echo "SERVICE_NAME=$(jq -r .service.name configs/develop.json)" >> $GITHUB_ENV
        echo "PUBLISHED_PORT=$(jq -r .service.publishedPort configs/develop.json)" >> $GITHUB_ENV
        echo "TARGET_PORT=$(jq -r .service.targetPort configs/develop.json)" >> $GITHUB_ENV

        # Verifica se as variáveis de porta estão vazias
        if [[ -z "${PUBLISHED_PORT}" || -z "${TARGET_PORT}" ]]; then
          echo "Port configuration is missing in configs/develop.json"
          exit 1
        fi

        # Criar tag personalizada baseada na hash do commit e data
        IMAGE_TAG=$(echo "${{ github.sha }}" | head -c7)
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
        push: true
        file: ./Dockerfile
        context: .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Verifica se as portas foram definidas corretamente
          if [[ -n "${PUBLISHED_PORT}" && -n "${TARGET_PORT}" ]]; then
            # Verifica se o serviço existe
            if docker service ls | grep -q ${{ env.SERVICE_NAME }}; then
              echo "Service exists, updating..."
              docker service update \
                --publish-rm published=${{ env.PUBLISHED_PORT }},target=${{ env.TARGET_PORT }} \
                --publish-add published=${{ env.PUBLISHED_PORT }},target=${{ env.TARGET_PORT }} \
                ${{ env.SERVICE_NAME }}
            else
              echo "Service does not exist, creating..."
              docker service create --name ${{ env.SERVICE_NAME }} \
                --publish published=${{ env.PUBLISHED_PORT }},target=${{ env.TARGET_PORT }} \
                ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
            fi
          else
            echo "Port configuration is missing, skipping service update."
            exit 1
          fi
