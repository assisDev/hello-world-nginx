name: CI/CD

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install jq and Read Config
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

        # Captura as variáveis do arquivo JSON
        SERVICE_NAME=$(jq -r .service.name configs/develop.json)

        # Verifica se a variável está definida corretamente
        echo "SERVICE_NAME: $SERVICE_NAME"

        # Exporta a variável para o ambiente do GitHub Actions
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV

    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
        push: true
        file: ./Dockerfile
        context: .

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Verifica se o serviço existe
          if docker service ls | grep -q ${{ env.SERVICE_NAME }}; then
            echo "Service exists, updating image..."
            docker service update --image ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest ${{ env.SERVICE_NAME }}
          fi
