name: CI/CD

on:
  push:
    branches:
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install jq and Read Config
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

        # Captura as variáveis do arquivo JSON
        SERVICE_NAME=$(jq -r .service.name configs/develop.json)
        PUBLISHED_PORT=$(jq -r .service.published_port configs/develop.json)
        TARGET_PORT=$(jq -r .service.target_port configs/develop.json)
        REPLICAS=$(jq -r .service.replicas configs/develop.json)
        CPU_LIMIT=$(jq -r .service.cpu_limit configs/develop.json)
        MEMORY_LIMIT=$(jq -r .service.memory_limit configs/develop.json)
        CONSTRAINT=$(jq -r .service.constraint configs/develop.json)
        UPDATE_DELAY=$(jq -r .service.update_delay configs/develop.json)
        UPDATE_PARALLELISM=$(jq -r .service.update_parallelism configs/develop.json)
        ROLLBACK_DELAY=$(jq -r .service.rollback_delay configs/develop.json)
        RESTART_CONDITION=$(jq -r .service.restart_condition configs/develop.json)
        NETWORK=$(jq -r .service.network configs/develop.json)
        LOG_DRIVER=$(jq -r .service.log_driver configs/develop.json)
        LOG_OPT=$(jq -r .service.log_opt configs/develop.json)

        # Verifica se as variáveis estão definidas corretamente
        echo "SERVICE_NAME: $SERVICE_NAME"
        echo "PUBLISHED_PORT: $PUBLISHED_PORT"
        echo "TARGET_PORT: $TARGET_PORT"
        echo "REPLICAS: $REPLICAS"
        echo "CPU_LIMIT: $CPU_LIMIT"
        echo "MEMORY_LIMIT: $MEMORY_LIMIT"
        echo "CONSTRAINT: $CONSTRAINT"
        echo "UPDATE_DELAY: $UPDATE_DELAY"
        echo "UPDATE_PARALLELISM: $UPDATE_PARALLELISM"
        echo "ROLLBACK_DELAY: $ROLLBACK_DELAY"
        echo "RESTART_CONDITION: $RESTART_CONDITION"
        echo "NETWORK: $NETWORK"
        echo "LOG_DRIVER: $LOG_DRIVER"
        echo "LOG_OPT: $LOG_OPT"

        # Se alguma variável estiver vazia, falha imediatamente
        if [[ -z "$SERVICE_NAME" || -z "$PUBLISHED_PORT" || -z "$TARGET_PORT" || -z "$REPLICAS" ]]; then
          echo "Erro: Uma ou mais variáveis estão vazias."
          exit 1
        fi

        # Exporta as variáveis para o ambiente do GitHub Actions
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
        echo "PUBLISHED_PORT=$PUBLISHED_PORT" >> $GITHUB_ENV
        echo "TARGET_PORT=$TARGET_PORT" >> $GITHUB_ENV
        echo "REPLICAS=$REPLICAS" >> $GITHUB_ENV
        echo "CPU_LIMIT=$CPU_LIMIT" >> $GITHUB_ENV
        echo "MEMORY_LIMIT=$MEMORY_LIMIT" >> $GITHUB_ENV
        echo "CONSTRAINT=$CONSTRAINT" >> $GITHUB_ENV
        echo "UPDATE_DELAY=$UPDATE_DELAY" >> $GITHUB_ENV
        echo "UPDATE_PARALLELISM=$UPDATE_PARALLELISM" >> $GITHUB_ENV
        echo "ROLLBACK_DELAY=$ROLLBACK_DELAY" >> $GITHUB_ENV
        echo "RESTART_CONDITION=$RESTART_CONDITION" >> $GITHUB_ENV
        echo "NETWORK=$NETWORK" >> $GITHUB_ENV
        echo "LOG_DRIVER=$LOG_DRIVER" >> $GITHUB_ENV
        echo "LOG_OPT=$LOG_OPT" >> $GITHUB_ENV

    - name: Log in to Docker Registry
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
        push: true
        file: ./Dockerfile
        context: .

    - name: Deploy to Docker Swarm
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Verifica se o serviço existe
          if docker service ls | grep -q ${{ env.SERVICE_NAME }}; then
            echo "Service exists, updating with new settings..."

            if [[ -n "${{ env.PUBLISHED_PORT }}" && -n "${{ env.TARGET_PORT }}" && -n "${{ env.REPLICAS }}" ]]; then
              docker service update \
                --image ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest \
                --publish-rm published=${{ env.PUBLISHED_PORT }},target=${{ env.TARGET_PORT }} \
                --publish-add published=${{ env.PUBLISHED_PORT }},target=${{ env.TARGET_PORT }} \
                --replicas ${{ env.REPLICAS }} \
                --limit-cpu ${{ env.CPU_LIMIT }} \
                --limit-memory ${{ env.MEMORY_LIMIT }} \
                --constraint-add ${{ env.CONSTRAINT }} \
                --restart-condition ${{ env.RESTART_CONDITION }} \
                --update-delay ${{ env.UPDATE_DELAY }} \
                --update-parallelism ${{ env.UPDATE_PARALLELISM }} \
                --rollback-delay ${{ env.ROLLBACK_DELAY }} \
                ${{ env.SERVICE_NAME }}
            else
              echo "Erro: Portas, réplicas, ou outros parâmetros não definidos."
              exit 1
            fi
          else
            echo "Service does not exist, creating new service..."

            docker service create \
              --name ${{ env.SERVICE_NAME }} \
              --publish ${{ env.PUBLISHED_PORT }}:${{ env.TARGET_PORT }} \
              --replicas ${{ env.REPLICAS }} \
              --limit-cpu ${{ env.CPU_LIMIT }} \
              --limit-memory ${{ env.MEMORY_LIMIT }} \
              --constraint ${{ env.CONSTRAINT }} \
              --restart-condition ${{ env.RESTART_CONDITION }} \
              --update-delay ${{ env.UPDATE_DELAY }} \
              --update-parallelism ${{ env.UPDATE_PARALLELISM }} \
              --rollback-delay ${{ env.ROLLBACK_DELAY }} \
              --network ${{ env.NETWORK }} \
              --log-driver ${{ env.LOG_DRIVER }} \
              --log-opt ${{ env.LOG_OPT }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          fi
